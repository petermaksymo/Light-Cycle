
C:/Users/Peter/OneDrive/1T8Semester2/ECE243/Light-Cycle/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 68 0b 00 00 6c 0b 00 00 70 0b 00 00     @...h...l...p...
  30:	74 0b 00 00 64 0b 00 00 78 0b 00 00 7c 0b 00 00     t...d...x...|...

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000289 	bl	b00 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000c84 	.word	0x00000c84

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000010c0 	.word	0x000010c0

00000124 <__cs3_heap_start_ptr>:
 124:	000010e8 	.word	0x000010e8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000010c8 	.word	0x000010c8
 170:	000010cb 	.word	0x000010cb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000010c8 	.word	0x000010c8
 1bc:	000010c8 	.word	0x000010c8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000010c8 	.word	0x000010c8
 200:	00000000 	.word	0x00000000
 204:	00000c08 	.word	0x00000c08

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000c08 	.word	0x00000c08
 250:	000010cc 	.word	0x000010cc
 254:	00000c88 	.word	0x00000c88
 258:	00000000 	.word	0x00000000

0000025c <wait_for_vsync>:
//waits for vsync
void wait_for_vsync() {
  volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
  register int status;

  *pixel_ctrl_ptr = 1; // start the synchronization process
 25c:	e3033fff 	movw	r3, #16383	; 0x3fff
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e3a02001 	mov	r2, #1
 268:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

  status = *(pixel_ctrl_ptr + 3);
 26c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
  while ((status & 0x01) != 0) {
 270:	e3130001 	tst	r3, #1
 274:	012fff1e 	bxeq	lr
    status = *(pixel_ctrl_ptr + 3);
 278:	e3032fff 	movw	r2, #16383	; 0x3fff
 27c:	e34f2f20 	movt	r2, #65312	; 0xff20
 280:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
  register int status;

  *pixel_ctrl_ptr = 1; // start the synchronization process

  status = *(pixel_ctrl_ptr + 3);
  while ((status & 0x01) != 0) {
 284:	e3130001 	tst	r3, #1
 288:	1afffffc 	bne	280 <wait_for_vsync+0x24>
 28c:	e12fff1e 	bx	lr

00000290 <plot_pixel>:
}


//plots a pixel
void plot_pixel(int x, int y, short int color) {
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = color;
 290:	e30130e4 	movw	r3, #4324	; 0x10e4
 294:	e3403000 	movt	r3, #0
 298:	e5933000 	ldr	r3, [r3]
 29c:	e1a00080 	lsl	r0, r0, #1
 2a0:	e0831501 	add	r1, r3, r1, lsl #10
 2a4:	e18120b0 	strh	r2, [r1, r0]
 2a8:	e12fff1e 	bx	lr

000002ac <draw_rectangle>:
  }
}


//draws a rectangle of width x height starting at top left
void draw_rectangle(int x, int y, int width, int height, short int color) {
 2ac:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2b0:	e1a07000 	mov	r7, r0
 2b4:	e1a0a001 	mov	r10, r1
 2b8:	e1dd92f8 	ldrsh	r9, [sp, #40]	; 0x28
  int init_x = x, init_y = y;

  for(x = init_x; x < init_x + width; x++) {
 2bc:	e080b002 	add	r11, r0, r2
 2c0:	e150000b 	cmp	r0, r11
 2c4:	a8bd8ff8 	popge	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 2c8:	ea000012 	b	318 <draw_rectangle+0x6c>
    for(y = init_y; y < init_y + height; y++) {
      //check boundaries
      if(x>=0 && y>=0 && x<SCREEN_X && y<SCREEN_Y) {
 2cc:	e3540000 	cmp	r4, #0
 2d0:	b3a03000 	movlt	r3, #0
 2d4:	a2063001 	andge	r3, r6, #1
 2d8:	e3530000 	cmp	r3, #0
 2dc:	0a000006 	beq	2fc <draw_rectangle+0x50>
 2e0:	e35400ef 	cmp	r4, #239	; 0xef
 2e4:	d1570008 	cmple	r7, r8
 2e8:	ca000003 	bgt	2fc <draw_rectangle+0x50>
        plot_pixel(x, y, color);
 2ec:	e1a00007 	mov	r0, r7
 2f0:	e1a01004 	mov	r1, r4
 2f4:	e1a02009 	mov	r2, r9
 2f8:	ebffffe4 	bl	290 <plot_pixel>
//draws a rectangle of width x height starting at top left
void draw_rectangle(int x, int y, int width, int height, short int color) {
  int init_x = x, init_y = y;

  for(x = init_x; x < init_x + width; x++) {
    for(y = init_y; y < init_y + height; y++) {
 2fc:	e2844001 	add	r4, r4, #1
 300:	e1540005 	cmp	r4, r5
 304:	bafffff0 	blt	2cc <draw_rectangle+0x20>

//draws a rectangle of width x height starting at top left
void draw_rectangle(int x, int y, int width, int height, short int color) {
  int init_x = x, init_y = y;

  for(x = init_x; x < init_x + width; x++) {
 308:	e2877001 	add	r7, r7, #1
 30c:	e157000b 	cmp	r7, r11
 310:	ba000002 	blt	320 <draw_rectangle+0x74>
 314:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    for(y = init_y; y < init_y + height; y++) {
 318:	e0815003 	add	r5, r1, r3
      //check boundaries
      if(x>=0 && y>=0 && x<SCREEN_X && y<SCREEN_Y) {
 31c:	e300813f 	movw	r8, #319	; 0x13f
//draws a rectangle of width x height starting at top left
void draw_rectangle(int x, int y, int width, int height, short int color) {
  int init_x = x, init_y = y;

  for(x = init_x; x < init_x + width; x++) {
    for(y = init_y; y < init_y + height; y++) {
 320:	e15a0005 	cmp	r10, r5
 324:	b1a0400a 	movlt	r4, r10
      //check boundaries
      if(x>=0 && y>=0 && x<SCREEN_X && y<SCREEN_Y) {
 328:	b1e06007 	mvnlt	r6, r7
 32c:	b1a06fa6 	lsrlt	r6, r6, #31
//draws a rectangle of width x height starting at top left
void draw_rectangle(int x, int y, int width, int height, short int color) {
  int init_x = x, init_y = y;

  for(x = init_x; x < init_x + width; x++) {
    for(y = init_y; y < init_y + height; y++) {
 330:	baffffe5 	blt	2cc <draw_rectangle+0x20>
 334:	eafffff3 	b	308 <draw_rectangle+0x5c>

00000338 <draw_board>:
  }
}


//draws the game board
void draw_board(int game_board[BOARD_X][BOARD_Y]) {
 338:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 33c:	e24dd014 	sub	sp, sp, #20
 340:	e58d000c 	str	r0, [sp, #12]
  int board_to_screen_factor = SCREEN_X / BOARD_X;
  short int player_colors[NUM_PLAYERS] = {0x07E0, 0xF8000, 0x001F, 0xF81F};

  for(int x = 0; x < BOARD_X; x+= board_to_screen_factor) {
 344:	e3a05000 	mov	r5, #0
    for(int y = 0; y < BOARD_Y; y+= board_to_screen_factor) {
      switch(game_board[x][y]) {
 348:	e1a08005 	mov	r8, r5
        case 1: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[0]); break;
        case 2: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[1]); break;
        case 3: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[2]); break;
        case 4: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[3]); break;

        default: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
 34c:	e3a07002 	mov	r7, #2
      switch(game_board[x][y]) {
        case 0: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
        case 1: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[0]); break;
        case 2: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[1]); break;
        case 3: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[2]); break;
        case 4: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[3]); break;
 350:	e3e0be7e 	mvn	r11, #2016	; 0x7e0
    for(int y = 0; y < BOARD_Y; y+= board_to_screen_factor) {
      switch(game_board[x][y]) {
        case 0: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
        case 1: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[0]); break;
        case 2: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[1]); break;
        case 3: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[2]); break;
 354:	e3a0901f 	mov	r9, #31
  for(int x = 0; x < BOARD_X; x+= board_to_screen_factor) {
    for(int y = 0; y < BOARD_Y; y+= board_to_screen_factor) {
      switch(game_board[x][y]) {
        case 0: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
        case 1: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[0]); break;
        case 2: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[1]); break;
 358:	e3a0a902 	mov	r10, #32768	; 0x8000
 35c:	e34fafff 	movt	r10, #65535	; 0xffff
 360:	ea00003b 	b	454 <draw_board+0x11c>
  int board_to_screen_factor = SCREEN_X / BOARD_X;
  short int player_colors[NUM_PLAYERS] = {0x07E0, 0xF8000, 0x001F, 0xF81F};

  for(int x = 0; x < BOARD_X; x+= board_to_screen_factor) {
    for(int y = 0; y < BOARD_Y; y+= board_to_screen_factor) {
      switch(game_board[x][y]) {
 364:	e7963104 	ldr	r3, [r6, r4, lsl #2]
 368:	e3530004 	cmp	r3, #4
 36c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 370:	ea000028 	b	418 <draw_board+0xe0>
 374:	00000388 	.word	0x00000388
 378:	000003a4 	.word	0x000003a4
 37c:	000003c4 	.word	0x000003c4
 380:	000003e0 	.word	0x000003e0
 384:	000003fc 	.word	0x000003fc
        case 0: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
 388:	e58d8000 	str	r8, [sp]
 38c:	e1a00005 	mov	r0, r5
 390:	e1a01004 	mov	r1, r4
 394:	e1a02007 	mov	r2, r7
 398:	e1a03007 	mov	r3, r7
 39c:	ebffffc2 	bl	2ac <draw_rectangle>
 3a0:	ea000022 	b	430 <draw_board+0xf8>
        case 1: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[0]); break;
 3a4:	e3a03e7e 	mov	r3, #2016	; 0x7e0
 3a8:	e58d3000 	str	r3, [sp]
 3ac:	e1a00005 	mov	r0, r5
 3b0:	e1a01004 	mov	r1, r4
 3b4:	e1a02007 	mov	r2, r7
 3b8:	e1a03007 	mov	r3, r7
 3bc:	ebffffba 	bl	2ac <draw_rectangle>
 3c0:	ea00001a 	b	430 <draw_board+0xf8>
        case 2: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[1]); break;
 3c4:	e58da000 	str	r10, [sp]
 3c8:	e1a00005 	mov	r0, r5
 3cc:	e1a01004 	mov	r1, r4
 3d0:	e1a02007 	mov	r2, r7
 3d4:	e1a03007 	mov	r3, r7
 3d8:	ebffffb3 	bl	2ac <draw_rectangle>
 3dc:	ea000013 	b	430 <draw_board+0xf8>
        case 3: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[2]); break;
 3e0:	e58d9000 	str	r9, [sp]
 3e4:	e1a00005 	mov	r0, r5
 3e8:	e1a01004 	mov	r1, r4
 3ec:	e1a02007 	mov	r2, r7
 3f0:	e1a03007 	mov	r3, r7
 3f4:	ebffffac 	bl	2ac <draw_rectangle>
 3f8:	ea00000c 	b	430 <draw_board+0xf8>
        case 4: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, player_colors[3]); break;
 3fc:	e58db000 	str	r11, [sp]
 400:	e1a00005 	mov	r0, r5
 404:	e1a01004 	mov	r1, r4
 408:	e1a02007 	mov	r2, r7
 40c:	e1a03007 	mov	r3, r7
 410:	ebffffa5 	bl	2ac <draw_rectangle>
 414:	ea000005 	b	430 <draw_board+0xf8>

        default: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
 418:	e58d8000 	str	r8, [sp]
 41c:	e1a00005 	mov	r0, r5
 420:	e1a01004 	mov	r1, r4
 424:	e1a02007 	mov	r2, r7
 428:	e1a03007 	mov	r3, r7
 42c:	ebffff9e 	bl	2ac <draw_rectangle>
void draw_board(int game_board[BOARD_X][BOARD_Y]) {
  int board_to_screen_factor = SCREEN_X / BOARD_X;
  short int player_colors[NUM_PLAYERS] = {0x07E0, 0xF8000, 0x001F, 0xF81F};

  for(int x = 0; x < BOARD_X; x+= board_to_screen_factor) {
    for(int y = 0; y < BOARD_Y; y+= board_to_screen_factor) {
 430:	e2844002 	add	r4, r4, #2
 434:	e3540078 	cmp	r4, #120	; 0x78
 438:	1affffc9 	bne	364 <draw_board+0x2c>
//draws the game board
void draw_board(int game_board[BOARD_X][BOARD_Y]) {
  int board_to_screen_factor = SCREEN_X / BOARD_X;
  short int player_colors[NUM_PLAYERS] = {0x07E0, 0xF8000, 0x001F, 0xF81F};

  for(int x = 0; x < BOARD_X; x+= board_to_screen_factor) {
 43c:	e2855002 	add	r5, r5, #2
 440:	e59d300c 	ldr	r3, [sp, #12]
 444:	e2833d0f 	add	r3, r3, #960	; 0x3c0
 448:	e58d300c 	str	r3, [sp, #12]
 44c:	e35500a0 	cmp	r5, #160	; 0xa0
 450:	0a000002 	beq	460 <draw_board+0x128>
    for(int y = 0; y < BOARD_Y; y+= board_to_screen_factor) {
      switch(game_board[x][y]) {
 454:	e59d600c 	ldr	r6, [sp, #12]
 458:	e1a04008 	mov	r4, r8
 45c:	eaffffc0 	b	364 <draw_board+0x2c>

        default: draw_rectangle(x, y, board_to_screen_factor, board_to_screen_factor, 0x0000); break;
      }
    }
  }
}
 460:	e28dd014 	add	sp, sp, #20
 464:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000468 <clear_screen>:
    }
}


//clears the screen by setting all pixels to black
void clear_screen() {
 468:	e92d4070 	push	{r4, r5, r6, lr}
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
 46c:	e3a05000 	mov	r5, #0
    }
}


//clears the screen by setting all pixels to black
void clear_screen() {
 470:	e1a06005 	mov	r6, r5
 474:	ea000009 	b	4a0 <clear_screen+0x38>
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
    for(y = 0; y < SCREEN_Y; y++) {
      plot_pixel(x, y, 0x0000);
 478:	e1a00005 	mov	r0, r5
 47c:	e1a01004 	mov	r1, r4
 480:	e1a02006 	mov	r2, r6
 484:	ebffff81 	bl	290 <plot_pixel>

//clears the screen by setting all pixels to black
void clear_screen() {
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
    for(y = 0; y < SCREEN_Y; y++) {
 488:	e2844001 	add	r4, r4, #1
 48c:	e35400f0 	cmp	r4, #240	; 0xf0
 490:	1afffff8 	bne	478 <clear_screen+0x10>


//clears the screen by setting all pixels to black
void clear_screen() {
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
 494:	e2855001 	add	r5, r5, #1
 498:	e3550d05 	cmp	r5, #320	; 0x140
 49c:	08bd8070 	popeq	{r4, r5, r6, pc}
    }
}


//clears the screen by setting all pixels to black
void clear_screen() {
 4a0:	e1a04006 	mov	r4, r6
 4a4:	eafffff3 	b	478 <clear_screen+0x10>

000004a8 <main>:
void draw_line(int x0, int y0, int  x1, int y1, short int line_color);
void draw_rectangle(int x, int y, int width, int height, short int color);
void plot_pixel(int x, int y, short int color);
void swap(int* x, int* y);

int main(void) {
 4a8:	e92d4030 	push	{r4, r5, lr}
 4ac:	e24ddb4b 	sub	sp, sp, #76800	; 0x12c00
 4b0:	e24dd024 	sub	sp, sp, #36	; 0x24
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;

    //initialize the game board, represents the screen. Each pixel here will
    //contain the player number or 0 for none
    int game_board[BOARD_X][BOARD_Y] = {0};
 4b4:	e28d0020 	add	r0, sp, #32
 4b8:	e3a01000 	mov	r1, #0
 4bc:	e3a02b4b 	mov	r2, #76800	; 0x12c00
 4c0:	eb00008b 	bl	6f4 <memset>

    //initialize player start positions
    int player_x[NUM_PLAYERS] = {BOARD_X/8, BOARD_X - BOARD_X/8, BOARD_X/8, BOARD_X - BOARD_X/8};
 4c4:	e300cc0c 	movw	r12, #3084	; 0xc0c
 4c8:	e340c000 	movt	r12, #0
 4cc:	e28de010 	add	lr, sp, #16
 4d0:	e89c000f 	ldm	r12, {r0, r1, r2, r3}
 4d4:	e88e000f 	stm	lr, {r0, r1, r2, r3}
    int player_y[NUM_PLAYERS] = {BOARD_Y/8, BOARD_Y - BOARD_Y/8, BOARD_Y - BOARD_Y/8, BOARD_Y/8};
 4d8:	e28cc010 	add	r12, r12, #16
 4dc:	e89c000f 	ldm	r12, {r0, r1, r2, r3}
 4e0:	e88d000f 	stm	sp, {r0, r1, r2, r3}
 4e4:	e3a03000 	mov	r3, #0

    for(int i = 0; i < NUM_PLAYERS; i++) {
 4e8:	e1a02003 	mov	r2, r3
      game_board[ player_x[i] ][ player_y[i] ] = i + 1;
 4ec:	e2822001 	add	r2, r2, #1
 4f0:	e28d1010 	add	r1, sp, #16
 4f4:	e7931001 	ldr	r1, [r3, r1]
 4f8:	e0611201 	rsb	r1, r1, r1, lsl #4
 4fc:	e79d0003 	ldr	r0, [sp, r3]
 500:	e0801181 	add	r1, r0, r1, lsl #3
 504:	e28d0b4b 	add	r0, sp, #76800	; 0x12c00
 508:	e2800020 	add	r0, r0, #32
 50c:	e0801101 	add	r1, r0, r1, lsl #2
 510:	e2411b4b 	sub	r1, r1, #76800	; 0x12c00
 514:	e5812000 	str	r2, [r1]
 518:	e2833004 	add	r3, r3, #4

    //initialize player start positions
    int player_x[NUM_PLAYERS] = {BOARD_X/8, BOARD_X - BOARD_X/8, BOARD_X/8, BOARD_X - BOARD_X/8};
    int player_y[NUM_PLAYERS] = {BOARD_Y/8, BOARD_Y - BOARD_Y/8, BOARD_Y - BOARD_Y/8, BOARD_Y/8};

    for(int i = 0; i < NUM_PLAYERS; i++) {
 51c:	e3520004 	cmp	r2, #4
 520:	1afffff1 	bne	4ec <main+0x44>
      game_board[ player_x[i] ][ player_y[i] ] = i + 1;
    }

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the
 524:	e3034fff 	movw	r4, #16383	; 0x3fff
 528:	e34f4f20 	movt	r4, #65312	; 0xff20
 52c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
 530:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
 534:	ebffff48 	bl	25c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
 538:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
 53c:	e30150e4 	movw	r5, #4324	; 0x10e4
 540:	e3405000 	movt	r5, #0
 544:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
 548:	ebffffc6 	bl	468 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
 54c:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
 550:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
 554:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
 558:	e5853000 	str	r3, [r5]

    while (1) {
        draw_board(game_board);

        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 55c:	e3035fff 	movw	r5, #16383	; 0x3fff
 560:	e34f5f20 	movt	r5, #65312	; 0xff20
 564:	e30140e4 	movw	r4, #4324	; 0x10e4
 568:	e3404000 	movt	r4, #0
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer

    while (1) {
        draw_board(game_board);
 56c:	e28d0020 	add	r0, sp, #32
 570:	ebffff70 	bl	338 <draw_board>

        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
 574:	ebffff38 	bl	25c <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 578:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
 57c:	e5843000 	str	r3, [r4]
 580:	eafffff9 	b	56c <main+0xc4>

00000584 <swap>:
}


//swap two ints
void swap(int* x, int* y) {
  int temp = *y;
 584:	e5913000 	ldr	r3, [r1]
  *y = *x;
 588:	e5902000 	ldr	r2, [r0]
 58c:	e5812000 	str	r2, [r1]
  *x = temp;
 590:	e5803000 	str	r3, [r0]
 594:	e12fff1e 	bx	lr

00000598 <draw_line>:
}



//draws a line using Bresenham's algorithm
void draw_line(int x0, int y0, int  x1, int y1, short int line_color) {
 598:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 59c:	e24dd014 	sub	sp, sp, #20
 5a0:	e58d000c 	str	r0, [sp, #12]
 5a4:	e58d1008 	str	r1, [sp, #8]
 5a8:	e58d2004 	str	r2, [sp, #4]
 5ac:	e58d3000 	str	r3, [sp]
 5b0:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
  bool isSteep = abs(y1-y0) > abs (x1-x0);
 5b4:	e0613003 	rsb	r3, r1, r3
 5b8:	e3530000 	cmp	r3, #0
 5bc:	b2633000 	rsblt	r3, r3, #0
 5c0:	e0602002 	rsb	r2, r0, r2
 5c4:	e0228fc2 	eor	r8, r2, r2, asr #31
 5c8:	e0488fc2 	sub	r8, r8, r2, asr #31
 5cc:	e1530008 	cmp	r3, r8
 5d0:	d3a08000 	movle	r8, #0
 5d4:	c3a08001 	movgt	r8, #1
  if (isSteep) {
 5d8:	e3580000 	cmp	r8, #0
 5dc:	0a000005 	beq	5f8 <draw_line+0x60>
    swap(&x0, &y0);
 5e0:	e28d000c 	add	r0, sp, #12
 5e4:	e28d1008 	add	r1, sp, #8
 5e8:	ebffffe5 	bl	584 <swap>
    swap(&x1, &y1);
 5ec:	e28d0004 	add	r0, sp, #4
 5f0:	e1a0100d 	mov	r1, sp
 5f4:	ebffffe2 	bl	584 <swap>
  }
  if(x0 > x1) {
 5f8:	e59d3004 	ldr	r3, [sp, #4]
 5fc:	e59d200c 	ldr	r2, [sp, #12]
 600:	e1520003 	cmp	r2, r3
 604:	da000005 	ble	620 <draw_line+0x88>
    swap(&x0, &x1);
 608:	e28d000c 	add	r0, sp, #12
 60c:	e28d1004 	add	r1, sp, #4
 610:	ebffffdb 	bl	584 <swap>
    swap(&y0, &y1);
 614:	e28d0008 	add	r0, sp, #8
 618:	e1a0100d 	mov	r1, sp
 61c:	ebffffd8 	bl	584 <swap>
  }

  int dX = x1 - x0;
 620:	e59d3004 	ldr	r3, [sp, #4]
 624:	e59d500c 	ldr	r5, [sp, #12]
 628:	e0659003 	rsb	r9, r5, r3
  int dY = abs(y1 - y0);
 62c:	e59d2000 	ldr	r2, [sp]
 630:	e59d6008 	ldr	r6, [sp, #8]
 634:	e0667002 	rsb	r7, r6, r2
 638:	e3570000 	cmp	r7, #0
 63c:	b2677000 	rsblt	r7, r7, #0
  int error = -(dX / 2);
 640:	e0894fa9 	add	r4, r9, r9, lsr #31
 644:	e1a040c4 	asr	r4, r4, #1
 648:	e2644000 	rsb	r4, r4, #0
  int x;
  int y = y0;
  int yStep;
  if(y0 < y1) yStep = 1;
 64c:	e1520006 	cmp	r2, r6
 650:	d3e0b000 	mvnle	r11, #0
 654:	c3a0b001 	movgt	r11, #1
  else yStep = -1;

  for(x = x0; x <= x1; x++) {
 658:	e1530005 	cmp	r3, r5
 65c:	ba00000d 	blt	698 <draw_line+0x100>
    if(isSteep) plot_pixel(y, x, line_color);
 660:	e3580000 	cmp	r8, #0
 664:	11a00006 	movne	r0, r6
 668:	11a01005 	movne	r1, r5
    else plot_pixel(x, y, line_color);
 66c:	01a00005 	moveq	r0, r5
 670:	01a01006 	moveq	r1, r6
 674:	e1a0200a 	mov	r2, r10
 678:	ebffff04 	bl	290 <plot_pixel>

    error += dY;
    if(error >= 0) {
 67c:	e0944007 	adds	r4, r4, r7
      y += yStep;
 680:	5086600b 	addpl	r6, r6, r11
      error -= dX;
 684:	50694004 	rsbpl	r4, r9, r4
  int y = y0;
  int yStep;
  if(y0 < y1) yStep = 1;
  else yStep = -1;

  for(x = x0; x <= x1; x++) {
 688:	e2855001 	add	r5, r5, #1
 68c:	e59d3004 	ldr	r3, [sp, #4]
 690:	e1530005 	cmp	r3, r5
 694:	aafffff1 	bge	660 <draw_line+0xc8>
    if(error >= 0) {
      y += yStep;
      error -= dX;
    }
  }
}
 698:	e28dd014 	add	sp, sp, #20
 69c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000006a0 <atexit>:
 6a0:	e1a01000 	mov	r1, r0
 6a4:	e3a00000 	mov	r0, #0
 6a8:	e92d4008 	push	{r3, lr}
 6ac:	e1a02000 	mov	r2, r0
 6b0:	e1a03000 	mov	r3, r0
 6b4:	eb00005b 	bl	828 <__register_exitproc>
 6b8:	e8bd4008 	pop	{r3, lr}
 6bc:	e12fff1e 	bx	lr

000006c0 <exit>:
 6c0:	e92d4008 	push	{r3, lr}
 6c4:	e3a01000 	mov	r1, #0
 6c8:	e1a04000 	mov	r4, r0
 6cc:	eb000092 	bl	91c <__call_exitprocs>
 6d0:	e59f3018 	ldr	r3, [pc, #24]	; 6f0 <exit+0x30>
 6d4:	e5930000 	ldr	r0, [r3]
 6d8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 6dc:	e3530000 	cmp	r3, #0
 6e0:	11a0e00f 	movne	lr, pc
 6e4:	112fff13 	bxne	r3
 6e8:	e1a00004 	mov	r0, r4
 6ec:	eb000116 	bl	b4c <_exit>
 6f0:	00000c2c 	.word	0x00000c2c

000006f4 <memset>:
 6f4:	e3520003 	cmp	r2, #3
 6f8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 6fc:	e20110ff 	and	r1, r1, #255	; 0xff
 700:	8a000008 	bhi	728 <memset+0x34>
 704:	e3520000 	cmp	r2, #0
 708:	0a000004 	beq	720 <memset+0x2c>
 70c:	e1a03000 	mov	r3, r0
 710:	e0822000 	add	r2, r2, r0
 714:	e4c31001 	strb	r1, [r3], #1
 718:	e1530002 	cmp	r3, r2
 71c:	1afffffc 	bne	714 <memset+0x20>
 720:	e8bd0010 	ldmfd	sp!, {r4}
 724:	e12fff1e 	bx	lr
 728:	e3100003 	tst	r0, #3
 72c:	e0802002 	add	r2, r0, r2
 730:	0a000007 	beq	754 <memset+0x60>
 734:	e280c001 	add	r12, r0, #1
 738:	e20c3003 	and	r3, r12, #3
 73c:	e3530000 	cmp	r3, #0
 740:	e54c1001 	strb	r1, [r12, #-1]
 744:	e1a0300c 	mov	r3, r12
 748:	e28cc001 	add	r12, r12, #1
 74c:	1afffff9 	bne	738 <memset+0x44>
 750:	ea000000 	b	758 <memset+0x64>
 754:	e1a03000 	mov	r3, r0
 758:	e0634002 	rsb	r4, r3, r2
 75c:	e081c401 	add	r12, r1, r1, lsl #8
 760:	e354003f 	cmp	r4, #63	; 0x3f
 764:	e08cc80c 	add	r12, r12, r12, lsl #16
 768:	da00001a 	ble	7d8 <memset+0xe4>
 76c:	e583c000 	str	r12, [r3]
 770:	e583c004 	str	r12, [r3, #4]
 774:	e583c008 	str	r12, [r3, #8]
 778:	e583c00c 	str	r12, [r3, #12]
 77c:	e583c010 	str	r12, [r3, #16]
 780:	e583c014 	str	r12, [r3, #20]
 784:	e583c018 	str	r12, [r3, #24]
 788:	e583c01c 	str	r12, [r3, #28]
 78c:	e583c020 	str	r12, [r3, #32]
 790:	e583c024 	str	r12, [r3, #36]	; 0x24
 794:	e583c028 	str	r12, [r3, #40]	; 0x28
 798:	e583c02c 	str	r12, [r3, #44]	; 0x2c
 79c:	e583c030 	str	r12, [r3, #48]	; 0x30
 7a0:	e583c034 	str	r12, [r3, #52]	; 0x34
 7a4:	e583c038 	str	r12, [r3, #56]	; 0x38
 7a8:	e583c03c 	str	r12, [r3, #60]	; 0x3c
 7ac:	e2833040 	add	r3, r3, #64	; 0x40
 7b0:	e0634002 	rsb	r4, r3, r2
 7b4:	e354003f 	cmp	r4, #63	; 0x3f
 7b8:	caffffeb 	bgt	76c <memset+0x78>
 7bc:	ea000005 	b	7d8 <memset+0xe4>
 7c0:	e583c000 	str	r12, [r3]
 7c4:	e583c004 	str	r12, [r3, #4]
 7c8:	e583c008 	str	r12, [r3, #8]
 7cc:	e583c00c 	str	r12, [r3, #12]
 7d0:	e2833010 	add	r3, r3, #16
 7d4:	e0634002 	rsb	r4, r3, r2
 7d8:	e354000f 	cmp	r4, #15
 7dc:	cafffff7 	bgt	7c0 <memset+0xcc>
 7e0:	e3540003 	cmp	r4, #3
 7e4:	da000006 	ble	804 <memset+0x110>
 7e8:	e2834004 	add	r4, r3, #4
 7ec:	e0643002 	rsb	r3, r4, r2
 7f0:	e3530003 	cmp	r3, #3
 7f4:	e504c004 	str	r12, [r4, #-4]
 7f8:	e1a03004 	mov	r3, r4
 7fc:	e2844004 	add	r4, r4, #4
 800:	cafffff9 	bgt	7ec <memset+0xf8>
 804:	e1520003 	cmp	r2, r3
 808:	9affffc4 	bls	720 <memset+0x2c>
 80c:	e2833001 	add	r3, r3, #1
 810:	e2822001 	add	r2, r2, #1
 814:	e5431001 	strb	r1, [r3, #-1]
 818:	e2833001 	add	r3, r3, #1
 81c:	e1530002 	cmp	r3, r2
 820:	1afffffb 	bne	814 <memset+0x120>
 824:	eaffffbd 	b	720 <memset+0x2c>

00000828 <__register_exitproc>:
 828:	e59fc0e4 	ldr	r12, [pc, #228]	; 914 <__register_exitproc+0xec>
 82c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 830:	e59c4000 	ldr	r4, [r12]
 834:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 838:	e35c0000 	cmp	r12, #0
 83c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 840:	e59c5004 	ldr	r5, [r12, #4]
 844:	0584c148 	streq	r12, [r4, #328]	; 0x148
 848:	e355001f 	cmp	r5, #31
 84c:	e24dd010 	sub	sp, sp, #16
 850:	e1a06000 	mov	r6, r0
 854:	da000015 	ble	8b0 <__register_exitproc+0x88>
 858:	e59f00b8 	ldr	r0, [pc, #184]	; 918 <__register_exitproc+0xf0>
 85c:	e3500000 	cmp	r0, #0
 860:	1a000001 	bne	86c <__register_exitproc+0x44>
 864:	e3e00000 	mvn	r0, #0
 868:	ea000018 	b	8d0 <__register_exitproc+0xa8>
 86c:	e3a00e19 	mov	r0, #400	; 0x190
 870:	e58d100c 	str	r1, [sp, #12]
 874:	e58d2008 	str	r2, [sp, #8]
 878:	e58d3004 	str	r3, [sp, #4]
 87c:	e320f000 	nop	{0}
 880:	e250c000 	subs	r12, r0, #0
 884:	e59d100c 	ldr	r1, [sp, #12]
 888:	e59d2008 	ldr	r2, [sp, #8]
 88c:	e59d3004 	ldr	r3, [sp, #4]
 890:	0afffff3 	beq	864 <__register_exitproc+0x3c>
 894:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 898:	e3a00000 	mov	r0, #0
 89c:	e58c0004 	str	r0, [r12, #4]
 8a0:	e58c5000 	str	r5, [r12]
 8a4:	e584c148 	str	r12, [r4, #328]	; 0x148
 8a8:	e58c0188 	str	r0, [r12, #392]	; 0x188
 8ac:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 8b0:	e3560000 	cmp	r6, #0
 8b4:	e59c4004 	ldr	r4, [r12, #4]
 8b8:	1a000007 	bne	8dc <__register_exitproc+0xb4>
 8bc:	e2843002 	add	r3, r4, #2
 8c0:	e2844001 	add	r4, r4, #1
 8c4:	e78c1103 	str	r1, [r12, r3, lsl #2]
 8c8:	e58c4004 	str	r4, [r12, #4]
 8cc:	e3a00000 	mov	r0, #0
 8d0:	e28dd010 	add	sp, sp, #16
 8d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8d8:	e12fff1e 	bx	lr
 8dc:	e3a00001 	mov	r0, #1
 8e0:	e1a00410 	lsl	r0, r0, r4
 8e4:	e08c8104 	add	r8, r12, r4, lsl #2
 8e8:	e3560002 	cmp	r6, #2
 8ec:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 8f0:	e5883108 	str	r3, [r8, #264]	; 0x108
 8f4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 8f8:	e1877000 	orr	r7, r7, r0
 8fc:	01830000 	orreq	r0, r3, r0
 900:	e1a05008 	mov	r5, r8
 904:	e5882088 	str	r2, [r8, #136]	; 0x88
 908:	e58c7188 	str	r7, [r12, #392]	; 0x188
 90c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 910:	eaffffe9 	b	8bc <__register_exitproc+0x94>
 914:	00000c2c 	.word	0x00000c2c
 918:	00000000 	.word	0x00000000

0000091c <__call_exitprocs>:
 91c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 920:	e59f3168 	ldr	r3, [pc, #360]	; a90 <__call_exitprocs+0x174>
 924:	e5933000 	ldr	r3, [r3]
 928:	e24dd014 	sub	sp, sp, #20
 92c:	e58d3004 	str	r3, [sp, #4]
 930:	e2833f52 	add	r3, r3, #328	; 0x148
 934:	e58d0008 	str	r0, [sp, #8]
 938:	e58d300c 	str	r3, [sp, #12]
 93c:	e1a07001 	mov	r7, r1
 940:	e3a08001 	mov	r8, #1
 944:	e59d3004 	ldr	r3, [sp, #4]
 948:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 94c:	e3560000 	cmp	r6, #0
 950:	e59db00c 	ldr	r11, [sp, #12]
 954:	0a000033 	beq	a28 <__call_exitprocs+0x10c>
 958:	e5965004 	ldr	r5, [r6, #4]
 95c:	e2554001 	subs	r4, r5, #1
 960:	5286a088 	addpl	r10, r6, #136	; 0x88
 964:	5285501f 	addpl	r5, r5, #31
 968:	508a5105 	addpl	r5, r10, r5, lsl #2
 96c:	5a000007 	bpl	990 <__call_exitprocs+0x74>
 970:	ea000029 	b	a1c <__call_exitprocs+0x100>
 974:	e5953000 	ldr	r3, [r5]
 978:	e1530007 	cmp	r3, r7
 97c:	0a000005 	beq	998 <__call_exitprocs+0x7c>
 980:	e2444001 	sub	r4, r4, #1
 984:	e3740001 	cmn	r4, #1
 988:	e2455004 	sub	r5, r5, #4
 98c:	0a000022 	beq	a1c <__call_exitprocs+0x100>
 990:	e3570000 	cmp	r7, #0
 994:	1afffff6 	bne	974 <__call_exitprocs+0x58>
 998:	e5963004 	ldr	r3, [r6, #4]
 99c:	e06a2005 	rsb	r2, r10, r5
 9a0:	e2433001 	sub	r3, r3, #1
 9a4:	e0862002 	add	r2, r6, r2
 9a8:	e1530004 	cmp	r3, r4
 9ac:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 9b0:	13a01000 	movne	r1, #0
 9b4:	05864004 	streq	r4, [r6, #4]
 9b8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 9bc:	e3530000 	cmp	r3, #0
 9c0:	0affffee 	beq	980 <__call_exitprocs+0x64>
 9c4:	e1a02418 	lsl	r2, r8, r4
 9c8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 9cc:	e1120001 	tst	r2, r1
 9d0:	e5969004 	ldr	r9, [r6, #4]
 9d4:	0a000016 	beq	a34 <__call_exitprocs+0x118>
 9d8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 9dc:	e1120001 	tst	r2, r1
 9e0:	1a000016 	bne	a40 <__call_exitprocs+0x124>
 9e4:	e59d0008 	ldr	r0, [sp, #8]
 9e8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 9ec:	e1a0e00f 	mov	lr, pc
 9f0:	e12fff13 	bx	r3
 9f4:	e5963004 	ldr	r3, [r6, #4]
 9f8:	e1530009 	cmp	r3, r9
 9fc:	1affffd0 	bne	944 <__call_exitprocs+0x28>
 a00:	e59b3000 	ldr	r3, [r11]
 a04:	e1530006 	cmp	r3, r6
 a08:	1affffcd 	bne	944 <__call_exitprocs+0x28>
 a0c:	e2444001 	sub	r4, r4, #1
 a10:	e3740001 	cmn	r4, #1
 a14:	e2455004 	sub	r5, r5, #4
 a18:	1affffdc 	bne	990 <__call_exitprocs+0x74>
 a1c:	e59f1070 	ldr	r1, [pc, #112]	; a94 <__call_exitprocs+0x178>
 a20:	e3510000 	cmp	r1, #0
 a24:	1a000009 	bne	a50 <__call_exitprocs+0x134>
 a28:	e28dd014 	add	sp, sp, #20
 a2c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a30:	e12fff1e 	bx	lr
 a34:	e1a0e00f 	mov	lr, pc
 a38:	e12fff13 	bx	r3
 a3c:	eaffffec 	b	9f4 <__call_exitprocs+0xd8>
 a40:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 a44:	e1a0e00f 	mov	lr, pc
 a48:	e12fff13 	bx	r3
 a4c:	eaffffe8 	b	9f4 <__call_exitprocs+0xd8>
 a50:	e5963004 	ldr	r3, [r6, #4]
 a54:	e3530000 	cmp	r3, #0
 a58:	e5963000 	ldr	r3, [r6]
 a5c:	1a000008 	bne	a84 <__call_exitprocs+0x168>
 a60:	e3530000 	cmp	r3, #0
 a64:	0a000006 	beq	a84 <__call_exitprocs+0x168>
 a68:	e1a00006 	mov	r0, r6
 a6c:	e58b3000 	str	r3, [r11]
 a70:	e320f000 	nop	{0}
 a74:	e59b6000 	ldr	r6, [r11]
 a78:	e3560000 	cmp	r6, #0
 a7c:	1affffb5 	bne	958 <__call_exitprocs+0x3c>
 a80:	eaffffe8 	b	a28 <__call_exitprocs+0x10c>
 a84:	e1a0b006 	mov	r11, r6
 a88:	e1a06003 	mov	r6, r3
 a8c:	eafffff9 	b	a78 <__call_exitprocs+0x15c>
 a90:	00000c2c 	.word	0x00000c2c
 a94:	00000000 	.word	0x00000000

00000a98 <register_fini>:
 a98:	e92d4008 	push	{r3, lr}
 a9c:	e59f3010 	ldr	r3, [pc, #16]	; ab4 <register_fini+0x1c>
 aa0:	e3530000 	cmp	r3, #0
 aa4:	159f000c 	ldrne	r0, [pc, #12]	; ab8 <register_fini+0x20>
 aa8:	1bfffefc 	blne	6a0 <atexit>
 aac:	e8bd4008 	pop	{r3, lr}
 ab0:	e12fff1e 	bx	lr
 ab4:	00000c54 	.word	0x00000c54
 ab8:	00000abc 	.word	0x00000abc

00000abc <__libc_fini_array>:
 abc:	e92d4038 	push	{r3, r4, r5, lr}
 ac0:	e59f5030 	ldr	r5, [pc, #48]	; af8 <__libc_fini_array+0x3c>
 ac4:	e59f4030 	ldr	r4, [pc, #48]	; afc <__libc_fini_array+0x40>
 ac8:	e0654004 	rsb	r4, r5, r4
 acc:	e1b04144 	asrs	r4, r4, #2
 ad0:	10855104 	addne	r5, r5, r4, lsl #2
 ad4:	0a000004 	beq	aec <__libc_fini_array+0x30>
 ad8:	e5353004 	ldr	r3, [r5, #-4]!
 adc:	e1a0e00f 	mov	lr, pc
 ae0:	e12fff13 	bx	r3
 ae4:	e2544001 	subs	r4, r4, #1
 ae8:	1afffffa 	bne	ad8 <__libc_fini_array+0x1c>
 aec:	eb000058 	bl	c54 <__libc_fini>
 af0:	e8bd4038 	pop	{r3, r4, r5, lr}
 af4:	e12fff1e 	bx	lr
 af8:	00000c6c 	.word	0x00000c6c
 afc:	00000c70 	.word	0x00000c70

00000b00 <__cs3_premain>:
 b00:	e92d4008 	push	{r3, lr}
 b04:	eb00001d 	bl	b80 <__libc_init_array>
 b08:	e59f3030 	ldr	r3, [pc, #48]	; b40 <__cs3_premain+0x40>
 b0c:	e3530000 	cmp	r3, #0
 b10:	15930000 	ldrne	r0, [r3]
 b14:	01a00003 	moveq	r0, r3
 b18:	e59f3024 	ldr	r3, [pc, #36]	; b44 <__cs3_premain+0x44>
 b1c:	e3530000 	cmp	r3, #0
 b20:	15931000 	ldrne	r1, [r3]
 b24:	01a01003 	moveq	r1, r3
 b28:	e3a02000 	mov	r2, #0
 b2c:	ebfffe5d 	bl	4a8 <main>
 b30:	e59f3010 	ldr	r3, [pc, #16]	; b48 <__cs3_premain+0x48>
 b34:	e3530000 	cmp	r3, #0
 b38:	1bfffee0 	blne	6c0 <exit>
 b3c:	eafffffe 	b	b3c <__cs3_premain+0x3c>
	...
 b48:	000006c0 	.word	0x000006c0

00000b4c <_exit>:
 b4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 b50:	e3a00018 	mov	r0, #24
 b54:	e59f1004 	ldr	r1, [pc, #4]	; b60 <_exit+0x14>
 b58:	ef123456 	svc	0x00123456
 b5c:	eafffffe 	b	b5c <_exit+0x10>
 b60:	00020026 	.word	0x00020026

00000b64 <__cs3_isr_interrupt>:
 b64:	eafffffe 	b	b64 <__cs3_isr_interrupt>

00000b68 <__cs3_isr_undef>:
 b68:	eafffffe 	b	b68 <__cs3_isr_undef>

00000b6c <__cs3_isr_swi>:
 b6c:	eafffffe 	b	b6c <__cs3_isr_swi>

00000b70 <__cs3_isr_pabort>:
 b70:	eafffffe 	b	b70 <__cs3_isr_pabort>

00000b74 <__cs3_isr_dabort>:
 b74:	eafffffe 	b	b74 <__cs3_isr_dabort>

00000b78 <__cs3_isr_irq>:
 b78:	eafffffe 	b	b78 <__cs3_isr_irq>

00000b7c <__cs3_isr_fiq>:
 b7c:	eafffffe 	b	b7c <__cs3_isr_fiq>

00000b80 <__libc_init_array>:
 b80:	e92d4070 	push	{r4, r5, r6, lr}
 b84:	e59f506c 	ldr	r5, [pc, #108]	; bf8 <__libc_init_array+0x78>
 b88:	e59f606c 	ldr	r6, [pc, #108]	; bfc <__libc_init_array+0x7c>
 b8c:	e0656006 	rsb	r6, r5, r6
 b90:	e1b06146 	asrs	r6, r6, #2
 b94:	12455004 	subne	r5, r5, #4
 b98:	13a04000 	movne	r4, #0
 b9c:	0a000005 	beq	bb8 <__libc_init_array+0x38>
 ba0:	e5b53004 	ldr	r3, [r5, #4]!
 ba4:	e2844001 	add	r4, r4, #1
 ba8:	e1a0e00f 	mov	lr, pc
 bac:	e12fff13 	bx	r3
 bb0:	e1560004 	cmp	r6, r4
 bb4:	1afffff9 	bne	ba0 <__libc_init_array+0x20>
 bb8:	e59f5040 	ldr	r5, [pc, #64]	; c00 <__libc_init_array+0x80>
 bbc:	e59f6040 	ldr	r6, [pc, #64]	; c04 <__libc_init_array+0x84>
 bc0:	e0656006 	rsb	r6, r5, r6
 bc4:	eb00001a 	bl	c34 <_init>
 bc8:	e1b06146 	asrs	r6, r6, #2
 bcc:	12455004 	subne	r5, r5, #4
 bd0:	13a04000 	movne	r4, #0
 bd4:	0a000005 	beq	bf0 <__libc_init_array+0x70>
 bd8:	e5b53004 	ldr	r3, [r5, #4]!
 bdc:	e2844001 	add	r4, r4, #1
 be0:	e1a0e00f 	mov	lr, pc
 be4:	e12fff13 	bx	r3
 be8:	e1560004 	cmp	r6, r4
 bec:	1afffff9 	bne	bd8 <__libc_init_array+0x58>
 bf0:	e8bd4070 	pop	{r4, r5, r6, lr}
 bf4:	e12fff1e 	bx	lr
 bf8:	00000c4c 	.word	0x00000c4c
 bfc:	00000c4c 	.word	0x00000c4c
 c00:	00000c4c 	.word	0x00000c4c
 c04:	00000c54 	.word	0x00000c54

Disassembly of section .rodata:

00000c0c <_global_impure_ptr-0x20>:
 c0c:	00000014 	.word	0x00000014
 c10:	0000008c 	.word	0x0000008c
 c14:	00000014 	.word	0x00000014
 c18:	0000008c 	.word	0x0000008c
 c1c:	0000000f 	.word	0x0000000f
 c20:	00000069 	.word	0x00000069
 c24:	00000069 	.word	0x00000069
 c28:	0000000f 	.word	0x0000000f

00000c2c <_global_impure_ptr>:
 c2c:	00000c98 00000043                       ....C...

00000c34 <_init>:
 c34:	e1a0c00d 	mov	r12, sp
 c38:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c3c:	e24cb004 	sub	r11, r12, #4
 c40:	e24bd028 	sub	sp, r11, #40	; 0x28
 c44:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c48:	e12fff1e 	bx	lr

00000c4c <__init_array_start>:
 c4c:	00000a98 	.word	0x00000a98

00000c50 <__frame_dummy_init_array_entry>:
 c50:	00000208                                ....

00000c54 <__libc_fini>:
 c54:	e1a0c00d 	mov	r12, sp
 c58:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c5c:	e24cb004 	sub	r11, r12, #4
 c60:	e24bd028 	sub	sp, r11, #40	; 0x28
 c64:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c68:	e12fff1e 	bx	lr

00000c6c <__fini_array_start>:
 c6c:	000001c4 	.word	0x000001c4

00000c70 <__cs3_regions>:
 c70:	00000000 	.word	0x00000000
 c74:	00000040 	.word	0x00000040
 c78:	00000040 	.word	0x00000040
 c7c:	00001088 	.word	0x00001088
 c80:	00000020 	.word	0x00000020

00000c84 <__cs3_regions_end>:
 c84:	00000000 	.word	0x00000000
