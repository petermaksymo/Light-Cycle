
C:/Users/Peter/OneDrive/1T8Semester2/ECE243/Light-Cycle/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 c4 0a 00 00 c8 0a 00 00 cc 0a 00 00     @...............
  30:	d0 0a 00 00 c0 0a 00 00 d4 0a 00 00 d8 0a 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000260 	bl	a5c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000bc0 	.word	0x00000bc0

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000ff8 	.word	0x00000ff8

00000124 <__cs3_heap_start_ptr>:
 124:	00001020 	.word	0x00001020

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001000 	.word	0x00001000
 170:	00001003 	.word	0x00001003
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001000 	.word	0x00001000
 1bc:	00001000 	.word	0x00001000
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001000 	.word	0x00001000
 200:	00000000 	.word	0x00000000
 204:	00000b64 	.word	0x00000b64

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b64 	.word	0x00000b64
 250:	00001004 	.word	0x00001004
 254:	00000bc0 	.word	0x00000bc0
 258:	00000000 	.word	0x00000000

0000025c <wait_for_vsync>:
//waits for vsync
void wait_for_vsync() {
  volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
  register int status;

  *pixel_ctrl_ptr = 1; // start the synchronization process
 25c:	e3033fff 	movw	r3, #16383	; 0x3fff
 260:	e34f3f20 	movt	r3, #65312	; 0xff20
 264:	e3a02001 	mov	r2, #1
 268:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

  status = *(pixel_ctrl_ptr + 3);
 26c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
  while ((status & 0x01) != 0) {
 270:	e3130001 	tst	r3, #1
 274:	012fff1e 	bxeq	lr
    status = *(pixel_ctrl_ptr + 3);
 278:	e3032fff 	movw	r2, #16383	; 0x3fff
 27c:	e34f2f20 	movt	r2, #65312	; 0xff20
 280:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
  register int status;

  *pixel_ctrl_ptr = 1; // start the synchronization process

  status = *(pixel_ctrl_ptr + 3);
  while ((status & 0x01) != 0) {
 284:	e3130001 	tst	r3, #1
 288:	1afffffc 	bne	280 <wait_for_vsync+0x24>
 28c:	e12fff1e 	bx	lr

00000290 <plot_pixel>:
}


//plots a pixel
void plot_pixel(int x, int y, short int line_color) {
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
 290:	e301301c 	movw	r3, #4124	; 0x101c
 294:	e3403000 	movt	r3, #0
 298:	e5933000 	ldr	r3, [r3]
 29c:	e1a00080 	lsl	r0, r0, #1
 2a0:	e0831501 	add	r1, r3, r1, lsl #10
 2a4:	e18120b0 	strh	r2, [r1, r0]
 2a8:	e12fff1e 	bx	lr

000002ac <draw_rectangle>:
  }
}


//draws a rectangle, centered around x and y
void draw_rectangle(int x, int y, int half_width, int half_height, short int color) {
 2ac:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 2b0:	e1dd92f8 	ldrsh	r9, [sp, #40]	; 0x28
  int init_x = x, init_y = y;
  int final_x = x + half_width;
 2b4:	e080b002 	add	r11, r0, r2
  int final_y = y + half_height;
 2b8:	e0815003 	add	r5, r1, r3

  for(x = init_x - half_width; x <= final_x; x++) {
 2bc:	e0627000 	rsb	r7, r2, r0
 2c0:	e15b0007 	cmp	r11, r7
 2c4:	b8bd8ff8 	poplt	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    for(y = init_y - half_height; y <= final_y; y++) {
 2c8:	e063a001 	rsb	r10, r3, r1
      //check boundaries
      if(x>=0 && y>=0 && x<SCREEN_X && y<SCREEN_Y) {
 2cc:	e300813f 	movw	r8, #319	; 0x13f
  int init_x = x, init_y = y;
  int final_x = x + half_width;
  int final_y = y + half_height;

  for(x = init_x - half_width; x <= final_x; x++) {
    for(y = init_y - half_height; y <= final_y; y++) {
 2d0:	e1a0400a 	mov	r4, r10
 2d4:	e155000a 	cmp	r5, r10
 2d8:	ba000010 	blt	320 <draw_rectangle+0x74>
      //check boundaries
      if(x>=0 && y>=0 && x<SCREEN_X && y<SCREEN_Y) {
 2dc:	e1e06007 	mvn	r6, r7
 2e0:	e1a06fa6 	lsr	r6, r6, #31
 2e4:	e3540000 	cmp	r4, #0
 2e8:	b3a03000 	movlt	r3, #0
 2ec:	a2063001 	andge	r3, r6, #1
 2f0:	e3530000 	cmp	r3, #0
 2f4:	0a000006 	beq	314 <draw_rectangle+0x68>
 2f8:	e35400ef 	cmp	r4, #239	; 0xef
 2fc:	d1570008 	cmple	r7, r8
 300:	ca000003 	bgt	314 <draw_rectangle+0x68>
        plot_pixel(x, y, color);
 304:	e1a00007 	mov	r0, r7
 308:	e1a01004 	mov	r1, r4
 30c:	e1a02009 	mov	r2, r9
 310:	ebffffde 	bl	290 <plot_pixel>
  int init_x = x, init_y = y;
  int final_x = x + half_width;
  int final_y = y + half_height;

  for(x = init_x - half_width; x <= final_x; x++) {
    for(y = init_y - half_height; y <= final_y; y++) {
 314:	e2844001 	add	r4, r4, #1
 318:	e1550004 	cmp	r5, r4
 31c:	aafffff0 	bge	2e4 <draw_rectangle+0x38>
void draw_rectangle(int x, int y, int half_width, int half_height, short int color) {
  int init_x = x, init_y = y;
  int final_x = x + half_width;
  int final_y = y + half_height;

  for(x = init_x - half_width; x <= final_x; x++) {
 320:	e2877001 	add	r7, r7, #1
 324:	e15b0007 	cmp	r11, r7
 328:	aaffffe8 	bge	2d0 <draw_rectangle+0x24>
 32c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000330 <clear_screen>:
    }
}


//clears the screen by setting all pixels to black
void clear_screen() {
 330:	e92d4070 	push	{r4, r5, r6, lr}
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
 334:	e3a05000 	mov	r5, #0
    }
}


//clears the screen by setting all pixels to black
void clear_screen() {
 338:	e1a06005 	mov	r6, r5
 33c:	ea000009 	b	368 <clear_screen+0x38>
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
    for(y = 0; y < SCREEN_Y; y++) {
      plot_pixel(x, y, 0x0000);
 340:	e1a00005 	mov	r0, r5
 344:	e1a01004 	mov	r1, r4
 348:	e1a02006 	mov	r2, r6
 34c:	ebffffcf 	bl	290 <plot_pixel>

//clears the screen by setting all pixels to black
void clear_screen() {
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
    for(y = 0; y < SCREEN_Y; y++) {
 350:	e2844001 	add	r4, r4, #1
 354:	e35400f0 	cmp	r4, #240	; 0xf0
 358:	1afffff8 	bne	340 <clear_screen+0x10>


//clears the screen by setting all pixels to black
void clear_screen() {
  int x, y;
  for(x = 0; x < SCREEN_X; x++) {
 35c:	e2855001 	add	r5, r5, #1
 360:	e3550d05 	cmp	r5, #320	; 0x140
 364:	08bd8070 	popeq	{r4, r5, r6, pc}
    }
}


//clears the screen by setting all pixels to black
void clear_screen() {
 368:	e1a04006 	mov	r4, r6
 36c:	eafffff3 	b	340 <clear_screen+0x10>

00000370 <swap>:
}


//swap two ints
void swap(int* x, int* y) {
  int temp = *y;
 370:	e5913000 	ldr	r3, [r1]
  *y = *x;
 374:	e5902000 	ldr	r2, [r0]
 378:	e5812000 	str	r2, [r1]
  *x = temp;
 37c:	e5803000 	str	r3, [r0]
 380:	e12fff1e 	bx	lr

00000384 <draw_line>:
  }
}


//draws a line using Bresenham's algorithm
void draw_line(int x0, int y0, int  x1, int y1, short int line_color) {
 384:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 388:	e24dd014 	sub	sp, sp, #20
 38c:	e58d000c 	str	r0, [sp, #12]
 390:	e58d1008 	str	r1, [sp, #8]
 394:	e58d2004 	str	r2, [sp, #4]
 398:	e58d3000 	str	r3, [sp]
 39c:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
  bool isSteep = abs(y1-y0) > abs (x1-x0);
 3a0:	e0613003 	rsb	r3, r1, r3
 3a4:	e3530000 	cmp	r3, #0
 3a8:	b2633000 	rsblt	r3, r3, #0
 3ac:	e0602002 	rsb	r2, r0, r2
 3b0:	e0228fc2 	eor	r8, r2, r2, asr #31
 3b4:	e0488fc2 	sub	r8, r8, r2, asr #31
 3b8:	e1530008 	cmp	r3, r8
 3bc:	d3a08000 	movle	r8, #0
 3c0:	c3a08001 	movgt	r8, #1
  if (isSteep) {
 3c4:	e3580000 	cmp	r8, #0
 3c8:	0a000005 	beq	3e4 <draw_line+0x60>
    swap(&x0, &y0);
 3cc:	e28d000c 	add	r0, sp, #12
 3d0:	e28d1008 	add	r1, sp, #8
 3d4:	ebffffe5 	bl	370 <swap>
    swap(&x1, &y1);
 3d8:	e28d0004 	add	r0, sp, #4
 3dc:	e1a0100d 	mov	r1, sp
 3e0:	ebffffe2 	bl	370 <swap>
  }
  if(x0 > x1) {
 3e4:	e59d3004 	ldr	r3, [sp, #4]
 3e8:	e59d200c 	ldr	r2, [sp, #12]
 3ec:	e1520003 	cmp	r2, r3
 3f0:	da000005 	ble	40c <draw_line+0x88>
    swap(&x0, &x1);
 3f4:	e28d000c 	add	r0, sp, #12
 3f8:	e28d1004 	add	r1, sp, #4
 3fc:	ebffffdb 	bl	370 <swap>
    swap(&y0, &y1);
 400:	e28d0008 	add	r0, sp, #8
 404:	e1a0100d 	mov	r1, sp
 408:	ebffffd8 	bl	370 <swap>
  }

  int dX = x1 - x0;
 40c:	e59d3004 	ldr	r3, [sp, #4]
 410:	e59d500c 	ldr	r5, [sp, #12]
 414:	e0659003 	rsb	r9, r5, r3
  int dY = abs(y1 - y0);
 418:	e59d2000 	ldr	r2, [sp]
 41c:	e59d6008 	ldr	r6, [sp, #8]
 420:	e0667002 	rsb	r7, r6, r2
 424:	e3570000 	cmp	r7, #0
 428:	b2677000 	rsblt	r7, r7, #0
  int error = -(dX / 2);
 42c:	e0894fa9 	add	r4, r9, r9, lsr #31
 430:	e1a040c4 	asr	r4, r4, #1
 434:	e2644000 	rsb	r4, r4, #0
  int x;
  int y = y0;
  int yStep;
  if(y0 < y1) yStep = 1;
 438:	e1520006 	cmp	r2, r6
 43c:	d3e0b000 	mvnle	r11, #0
 440:	c3a0b001 	movgt	r11, #1
  else yStep = -1;

  for(x = x0; x <= x1; x++) {
 444:	e1530005 	cmp	r3, r5
 448:	ba00000d 	blt	484 <draw_line+0x100>
    if(isSteep) plot_pixel(y, x, line_color);
 44c:	e3580000 	cmp	r8, #0
 450:	11a00006 	movne	r0, r6
 454:	11a01005 	movne	r1, r5
    else plot_pixel(x, y, line_color);
 458:	01a00005 	moveq	r0, r5
 45c:	01a01006 	moveq	r1, r6
 460:	e1a0200a 	mov	r2, r10
 464:	ebffff89 	bl	290 <plot_pixel>

    error += dY;
    if(error >= 0) {
 468:	e0944007 	adds	r4, r4, r7
      y += yStep;
 46c:	5086600b 	addpl	r6, r6, r11
      error -= dX;
 470:	50694004 	rsbpl	r4, r9, r4
  int y = y0;
  int yStep;
  if(y0 < y1) yStep = 1;
  else yStep = -1;

  for(x = x0; x <= x1; x++) {
 474:	e2855001 	add	r5, r5, #1
 478:	e59d3004 	ldr	r3, [sp, #4]
 47c:	e1530005 	cmp	r3, r5
 480:	aafffff1 	bge	44c <draw_line+0xc8>
    if(error >= 0) {
      y += yStep;
      error -= dX;
    }
  }
}
 484:	e28dd014 	add	sp, sp, #20
 488:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000048c <main>:
void draw_line(int x0, int y0, int  x1, int y1, short int line_color);
void draw_rectangle(int x, int y, int width, int height, short int color);
void plot_pixel(int x, int y, short int line_color);
void swap(int* x, int* y);

int main(void) {
 48c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 490:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
 494:	e3a04000 	mov	r4, #0
        rects_dx[TOTAL_RECTANGLES], rects_dy[TOTAL_RECTANGLES],
        rects_color[TOTAL_RECTANGLES];

    //randomize the rectangle initial position/direction
    for(int i = 0; i < TOTAL_RECTANGLES; i++) {
      rects_x[i] = rand()%SCREEN_X;
 498:	e3066667 	movw	r6, #26215	; 0x6667
 49c:	e3466666 	movt	r6, #26214	; 0x6666
      rects_y[i] = rand()&SCREEN_Y;
      rects_dx[i] = (rand()%2)*2-1;
      rects_dy[i] = (rand()%2)*2-1;
      rects_color[i] = rand()%(0xFFFF);
 4a0:	e3085001 	movw	r5, #32769	; 0x8001
 4a4:	e3485000 	movt	r5, #32768	; 0x8000
        rects_dx[TOTAL_RECTANGLES], rects_dy[TOTAL_RECTANGLES],
        rects_color[TOTAL_RECTANGLES];

    //randomize the rectangle initial position/direction
    for(int i = 0; i < TOTAL_RECTANGLES; i++) {
      rects_x[i] = rand()%SCREEN_X;
 4a8:	eb00009e 	bl	728 <rand>
 4ac:	e0c23096 	smull	r3, r2, r6, r0
 4b0:	e1a03fc0 	asr	r3, r0, #31
 4b4:	e06333c2 	rsb	r3, r3, r2, asr #7
 4b8:	e0833103 	add	r3, r3, r3, lsl #2
 4bc:	e0400303 	sub	r0, r0, r3, lsl #6
 4c0:	e28d3090 	add	r3, sp, #144	; 0x90
 4c4:	e7840003 	str	r0, [r4, r3]
      rects_y[i] = rand()&SCREEN_Y;
 4c8:	eb000096 	bl	728 <rand>
 4cc:	e20000f0 	and	r0, r0, #240	; 0xf0
 4d0:	e28d3070 	add	r3, sp, #112	; 0x70
 4d4:	e7840003 	str	r0, [r4, r3]
      rects_dx[i] = (rand()%2)*2-1;
 4d8:	eb000092 	bl	728 <rand>
 4dc:	e0803fa0 	add	r3, r0, r0, lsr #31
 4e0:	e2033001 	and	r3, r3, #1
 4e4:	e0430fa0 	sub	r0, r3, r0, lsr #31
 4e8:	e1a02080 	lsl	r2, r0, #1
 4ec:	e2422001 	sub	r2, r2, #1
 4f0:	e28d3050 	add	r3, sp, #80	; 0x50
 4f4:	e7842003 	str	r2, [r4, r3]
      rects_dy[i] = (rand()%2)*2-1;
 4f8:	eb00008a 	bl	728 <rand>
 4fc:	e0803fa0 	add	r3, r0, r0, lsr #31
 500:	e2033001 	and	r3, r3, #1
 504:	e0430fa0 	sub	r0, r3, r0, lsr #31
 508:	e1a02080 	lsl	r2, r0, #1
 50c:	e2422001 	sub	r2, r2, #1
 510:	e28d3030 	add	r3, sp, #48	; 0x30
 514:	e7842003 	str	r2, [r4, r3]
      rects_color[i] = rand()%(0xFFFF);
 518:	eb000082 	bl	728 <rand>
 51c:	e0c23095 	smull	r3, r2, r5, r0
 520:	e0822000 	add	r2, r2, r0
 524:	e1a03fc0 	asr	r3, r0, #31
 528:	e06337c2 	rsb	r3, r3, r2, asr #15
 52c:	e0633803 	rsb	r3, r3, r3, lsl #16
 530:	e0630000 	rsb	r0, r3, r0
 534:	e28d3010 	add	r3, sp, #16
 538:	e7840003 	str	r0, [r4, r3]
 53c:	e2844004 	add	r4, r4, #4
    int rects_x[TOTAL_RECTANGLES], rects_y[TOTAL_RECTANGLES],
        rects_dx[TOTAL_RECTANGLES], rects_dy[TOTAL_RECTANGLES],
        rects_color[TOTAL_RECTANGLES];

    //randomize the rectangle initial position/direction
    for(int i = 0; i < TOTAL_RECTANGLES; i++) {
 540:	e3540020 	cmp	r4, #32
 544:	1affffd7 	bne	4a8 <main+0x1c>
      rects_dy[i] = (rand()%2)*2-1;
      rects_color[i] = rand()%(0xFFFF);
    }

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the
 548:	e3034fff 	movw	r4, #16383	; 0x3fff
 54c:	e34f4f20 	movt	r4, #65312	; 0xff20
 550:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
 554:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
 558:	ebffff3f 	bl	25c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
 55c:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
 560:	e301501c 	movw	r5, #4124	; 0x101c
 564:	e3405000 	movt	r5, #0
 568:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
 56c:	ebffff6f 	bl	330 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
 570:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
 574:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
 578:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
 57c:	e5853000 	str	r3, [r5]
    {
        clear_screen();

        //draw lines between rectangles
        for(int i = 0; i < TOTAL_RECTANGLES - 1; i++) {
          draw_rectangle(rects_x[i], rects_y[i], 2, 2, rects_color[i]);
 580:	e3a0b002 	mov	r11, #2
          if(rects_x[i] <= 0 || rects_x[i] >= SCREEN_X) rects_dx[i] = rects_dx[i]*-1;
          if(rects_y[i] <= 0 || rects_y[i] >= SCREEN_Y) rects_dy[i] = rects_dy[i]*-1;
        }

        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 584:	e3030fff 	movw	r0, #16383	; 0x3fff
 588:	e34f0f20 	movt	r0, #65312	; 0xff20
 58c:	e58d000c 	str	r0, [sp, #12]
 590:	e58d5008 	str	r5, [sp, #8]
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer

    while (1)
    {
        clear_screen();
 594:	ebffff65 	bl	330 <clear_screen>
void draw_line(int x0, int y0, int  x1, int y1, short int line_color);
void draw_rectangle(int x, int y, int width, int height, short int color);
void plot_pixel(int x, int y, short int line_color);
void swap(int* x, int* y);

int main(void) {
 598:	e28d900c 	add	r9, sp, #12
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer

    while (1)
    {
        clear_screen();
 59c:	e3a04000 	mov	r4, #0

        //draw lines between rectangles
        for(int i = 0; i < TOTAL_RECTANGLES - 1; i++) {
          draw_rectangle(rects_x[i], rects_y[i], 2, 2, rects_color[i]);
 5a0:	e28da090 	add	r10, sp, #144	; 0x90
 5a4:	e794600a 	ldr	r6, [r4, r10]
 5a8:	e28d8070 	add	r8, sp, #112	; 0x70
 5ac:	e7945008 	ldr	r5, [r4, r8]
 5b0:	e2844004 	add	r4, r4, #4
 5b4:	e5b97004 	ldr	r7, [r9, #4]!
 5b8:	e6bf7077 	sxth	r7, r7
 5bc:	e58d7000 	str	r7, [sp]
 5c0:	e1a00006 	mov	r0, r6
 5c4:	e1a01005 	mov	r1, r5
 5c8:	e1a0200b 	mov	r2, r11
 5cc:	e1a0300b 	mov	r3, r11
 5d0:	ebffff35 	bl	2ac <draw_rectangle>
          draw_line(rects_x[i], rects_y[i], rects_x[i+1], rects_y[i+1], rects_color[i]);
 5d4:	e794200a 	ldr	r2, [r4, r10]
 5d8:	e7943008 	ldr	r3, [r4, r8]
 5dc:	e58d7000 	str	r7, [sp]
 5e0:	e1a00006 	mov	r0, r6
 5e4:	e1a01005 	mov	r1, r5
 5e8:	ebffff65 	bl	384 <draw_line>
    while (1)
    {
        clear_screen();

        //draw lines between rectangles
        for(int i = 0; i < TOTAL_RECTANGLES - 1; i++) {
 5ec:	e354001c 	cmp	r4, #28
 5f0:	1affffea 	bne	5a0 <main+0x114>
          draw_rectangle(rects_x[i], rects_y[i], 2, 2, rects_color[i]);
          draw_line(rects_x[i], rects_y[i], rects_x[i+1], rects_y[i+1], rects_color[i]);
        }
        draw_rectangle(rects_x[TOTAL_RECTANGLES-1], rects_y[TOTAL_RECTANGLES-1], 2, 2, rects_color[TOTAL_RECTANGLES-1]);
 5f4:	e59d50ac 	ldr	r5, [sp, #172]	; 0xac
 5f8:	e59d408c 	ldr	r4, [sp, #140]	; 0x8c
 5fc:	e1dd62fc 	ldrsh	r6, [sp, #44]	; 0x2c
 600:	e58d6000 	str	r6, [sp]
 604:	e1a00005 	mov	r0, r5
 608:	e1a01004 	mov	r1, r4
 60c:	e1a0200b 	mov	r2, r11
 610:	e1a0300b 	mov	r3, r11
 614:	ebffff24 	bl	2ac <draw_rectangle>
        draw_line(rects_x[TOTAL_RECTANGLES-1], rects_y[TOTAL_RECTANGLES-1], rects_x[0], rects_y[0], rects_color[TOTAL_RECTANGLES-1]);
 618:	e58d6000 	str	r6, [sp]
 61c:	e1a00005 	mov	r0, r5
 620:	e1a01004 	mov	r1, r4
 624:	e59d2090 	ldr	r2, [sp, #144]	; 0x90
 628:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
 62c:	ebffff54 	bl	384 <draw_line>
 630:	e3a03000 	mov	r3, #0

        //movement and adjust direction to bounce of edges of screen
        for(int i = 0; i < TOTAL_RECTANGLES; i++) {
          rects_x[i] += rects_dx[i];
 634:	e28d2090 	add	r2, sp, #144	; 0x90
 638:	e7930002 	ldr	r0, [r3, r2]
 63c:	e28d1050 	add	r1, sp, #80	; 0x50
 640:	e7931001 	ldr	r1, [r3, r1]
 644:	e0801001 	add	r1, r0, r1
 648:	e7831002 	str	r1, [r3, r2]
          rects_y[i] += rects_dy[i];
 64c:	e28d2030 	add	r2, sp, #48	; 0x30
 650:	e793c002 	ldr	r12, [r3, r2]
 654:	e28d0070 	add	r0, sp, #112	; 0x70
 658:	e7932000 	ldr	r2, [r3, r0]
 65c:	e08c2002 	add	r2, r12, r2
 660:	e7832000 	str	r2, [r3, r0]


          if(rects_x[i] <= 0 || rects_x[i] >= SCREEN_X) rects_dx[i] = rects_dx[i]*-1;
 664:	e2411001 	sub	r1, r1, #1
 668:	e300013e 	movw	r0, #318	; 0x13e
 66c:	e1510000 	cmp	r1, r0
 670:	828d1050 	addhi	r1, sp, #80	; 0x50
 674:	87930001 	ldrhi	r0, [r3, r1]
 678:	82600000 	rsbhi	r0, r0, #0
 67c:	87830001 	strhi	r0, [r3, r1]
          if(rects_y[i] <= 0 || rects_y[i] >= SCREEN_Y) rects_dy[i] = rects_dy[i]*-1;
 680:	e2422001 	sub	r2, r2, #1
 684:	e35200ee 	cmp	r2, #238	; 0xee
 688:	826cc000 	rsbhi	r12, r12, #0
 68c:	828d2030 	addhi	r2, sp, #48	; 0x30
 690:	8783c002 	strhi	r12, [r3, r2]
 694:	e2833004 	add	r3, r3, #4
        }
        draw_rectangle(rects_x[TOTAL_RECTANGLES-1], rects_y[TOTAL_RECTANGLES-1], 2, 2, rects_color[TOTAL_RECTANGLES-1]);
        draw_line(rects_x[TOTAL_RECTANGLES-1], rects_y[TOTAL_RECTANGLES-1], rects_x[0], rects_y[0], rects_color[TOTAL_RECTANGLES-1]);

        //movement and adjust direction to bounce of edges of screen
        for(int i = 0; i < TOTAL_RECTANGLES; i++) {
 698:	e3530020 	cmp	r3, #32
 69c:	1affffe4 	bne	634 <main+0x1a8>

          if(rects_x[i] <= 0 || rects_x[i] >= SCREEN_X) rects_dx[i] = rects_dx[i]*-1;
          if(rects_y[i] <= 0 || rects_y[i] >= SCREEN_Y) rects_dy[i] = rects_dy[i]*-1;
        }

        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
 6a0:	ebfffeed 	bl	25c <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
 6a4:	e59d200c 	ldr	r2, [sp, #12]
 6a8:	e5123fdb 	ldr	r3, [r2, #-4059]	; 0xfffff025
 6ac:	e59d0008 	ldr	r0, [sp, #8]
 6b0:	e5803000 	str	r3, [r0]
    }
 6b4:	eaffffb6 	b	594 <main+0x108>

000006b8 <atexit>:
 6b8:	e1a01000 	mov	r1, r0
 6bc:	e3a00000 	mov	r0, #0
 6c0:	e92d4008 	push	{r3, lr}
 6c4:	e1a02000 	mov	r2, r0
 6c8:	e1a03000 	mov	r3, r0
 6cc:	eb00002c 	bl	784 <__register_exitproc>
 6d0:	e8bd4008 	pop	{r3, lr}
 6d4:	e12fff1e 	bx	lr

000006d8 <exit>:
 6d8:	e92d4008 	push	{r3, lr}
 6dc:	e3a01000 	mov	r1, #0
 6e0:	e1a04000 	mov	r4, r0
 6e4:	eb000063 	bl	878 <__call_exitprocs>
 6e8:	e59f3018 	ldr	r3, [pc, #24]	; 708 <exit+0x30>
 6ec:	e5930000 	ldr	r0, [r3]
 6f0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 6f4:	e3530000 	cmp	r3, #0
 6f8:	11a0e00f 	movne	lr, pc
 6fc:	112fff13 	bxne	r3
 700:	e1a00004 	mov	r0, r4
 704:	eb0000e7 	bl	aa8 <_exit>
 708:	00000b68 	.word	0x00000b68

0000070c <srand>:
 70c:	e59f3010 	ldr	r3, [pc, #16]	; 724 <srand+0x18>
 710:	e5933000 	ldr	r3, [r3]
 714:	e3a02000 	mov	r2, #0
 718:	e58300a8 	str	r0, [r3, #168]	; 0xa8
 71c:	e58320ac 	str	r2, [r3, #172]	; 0xac
 720:	e12fff1e 	bx	lr
 724:	00000bc8 	.word	0x00000bc8

00000728 <rand>:
 728:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 72c:	e59f3044 	ldr	r3, [pc, #68]	; 778 <rand+0x50>
 730:	e593c000 	ldr	r12, [r3]
 734:	e59f4040 	ldr	r4, [pc, #64]	; 77c <rand+0x54>
 738:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
 73c:	e0040492 	mul	r4, r2, r4
 740:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
 744:	e59f3034 	ldr	r3, [pc, #52]	; 780 <rand+0x58>
 748:	e0244193 	mla	r4, r3, r1, r4
 74c:	e0810392 	umull	r0, r1, r2, r3
 750:	e3a02001 	mov	r2, #1
 754:	e0922000 	adds	r2, r2, r0
 758:	e0841001 	add	r1, r4, r1
 75c:	e3a03000 	mov	r3, #0
 760:	e0a33001 	adc	r3, r3, r1
 764:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
 768:	e58c30ac 	str	r3, [r12, #172]	; 0xac
 76c:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
 770:	e8bd0010 	ldmfd	sp!, {r4}
 774:	e12fff1e 	bx	lr
 778:	00000bc8 	.word	0x00000bc8
 77c:	5851f42d 	.word	0x5851f42d
 780:	4c957f2d 	.word	0x4c957f2d

00000784 <__register_exitproc>:
 784:	e59fc0e4 	ldr	r12, [pc, #228]	; 870 <__register_exitproc+0xec>
 788:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 78c:	e59c4000 	ldr	r4, [r12]
 790:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 794:	e35c0000 	cmp	r12, #0
 798:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 79c:	e59c5004 	ldr	r5, [r12, #4]
 7a0:	0584c148 	streq	r12, [r4, #328]	; 0x148
 7a4:	e355001f 	cmp	r5, #31
 7a8:	e24dd010 	sub	sp, sp, #16
 7ac:	e1a06000 	mov	r6, r0
 7b0:	da000015 	ble	80c <__register_exitproc+0x88>
 7b4:	e59f00b8 	ldr	r0, [pc, #184]	; 874 <__register_exitproc+0xf0>
 7b8:	e3500000 	cmp	r0, #0
 7bc:	1a000001 	bne	7c8 <__register_exitproc+0x44>
 7c0:	e3e00000 	mvn	r0, #0
 7c4:	ea000018 	b	82c <__register_exitproc+0xa8>
 7c8:	e3a00e19 	mov	r0, #400	; 0x190
 7cc:	e58d100c 	str	r1, [sp, #12]
 7d0:	e58d2008 	str	r2, [sp, #8]
 7d4:	e58d3004 	str	r3, [sp, #4]
 7d8:	e320f000 	nop	{0}
 7dc:	e250c000 	subs	r12, r0, #0
 7e0:	e59d100c 	ldr	r1, [sp, #12]
 7e4:	e59d2008 	ldr	r2, [sp, #8]
 7e8:	e59d3004 	ldr	r3, [sp, #4]
 7ec:	0afffff3 	beq	7c0 <__register_exitproc+0x3c>
 7f0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 7f4:	e3a00000 	mov	r0, #0
 7f8:	e58c0004 	str	r0, [r12, #4]
 7fc:	e58c5000 	str	r5, [r12]
 800:	e584c148 	str	r12, [r4, #328]	; 0x148
 804:	e58c0188 	str	r0, [r12, #392]	; 0x188
 808:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 80c:	e3560000 	cmp	r6, #0
 810:	e59c4004 	ldr	r4, [r12, #4]
 814:	1a000007 	bne	838 <__register_exitproc+0xb4>
 818:	e2843002 	add	r3, r4, #2
 81c:	e2844001 	add	r4, r4, #1
 820:	e78c1103 	str	r1, [r12, r3, lsl #2]
 824:	e58c4004 	str	r4, [r12, #4]
 828:	e3a00000 	mov	r0, #0
 82c:	e28dd010 	add	sp, sp, #16
 830:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 834:	e12fff1e 	bx	lr
 838:	e3a00001 	mov	r0, #1
 83c:	e1a00410 	lsl	r0, r0, r4
 840:	e08c8104 	add	r8, r12, r4, lsl #2
 844:	e3560002 	cmp	r6, #2
 848:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 84c:	e5883108 	str	r3, [r8, #264]	; 0x108
 850:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 854:	e1877000 	orr	r7, r7, r0
 858:	01830000 	orreq	r0, r3, r0
 85c:	e1a05008 	mov	r5, r8
 860:	e5882088 	str	r2, [r8, #136]	; 0x88
 864:	e58c7188 	str	r7, [r12, #392]	; 0x188
 868:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 86c:	eaffffe9 	b	818 <__register_exitproc+0x94>
 870:	00000b68 	.word	0x00000b68
 874:	00000000 	.word	0x00000000

00000878 <__call_exitprocs>:
 878:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 87c:	e59f3168 	ldr	r3, [pc, #360]	; 9ec <__call_exitprocs+0x174>
 880:	e5933000 	ldr	r3, [r3]
 884:	e24dd014 	sub	sp, sp, #20
 888:	e58d3004 	str	r3, [sp, #4]
 88c:	e2833f52 	add	r3, r3, #328	; 0x148
 890:	e58d0008 	str	r0, [sp, #8]
 894:	e58d300c 	str	r3, [sp, #12]
 898:	e1a07001 	mov	r7, r1
 89c:	e3a08001 	mov	r8, #1
 8a0:	e59d3004 	ldr	r3, [sp, #4]
 8a4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 8a8:	e3560000 	cmp	r6, #0
 8ac:	e59db00c 	ldr	r11, [sp, #12]
 8b0:	0a000033 	beq	984 <__call_exitprocs+0x10c>
 8b4:	e5965004 	ldr	r5, [r6, #4]
 8b8:	e2554001 	subs	r4, r5, #1
 8bc:	5286a088 	addpl	r10, r6, #136	; 0x88
 8c0:	5285501f 	addpl	r5, r5, #31
 8c4:	508a5105 	addpl	r5, r10, r5, lsl #2
 8c8:	5a000007 	bpl	8ec <__call_exitprocs+0x74>
 8cc:	ea000029 	b	978 <__call_exitprocs+0x100>
 8d0:	e5953000 	ldr	r3, [r5]
 8d4:	e1530007 	cmp	r3, r7
 8d8:	0a000005 	beq	8f4 <__call_exitprocs+0x7c>
 8dc:	e2444001 	sub	r4, r4, #1
 8e0:	e3740001 	cmn	r4, #1
 8e4:	e2455004 	sub	r5, r5, #4
 8e8:	0a000022 	beq	978 <__call_exitprocs+0x100>
 8ec:	e3570000 	cmp	r7, #0
 8f0:	1afffff6 	bne	8d0 <__call_exitprocs+0x58>
 8f4:	e5963004 	ldr	r3, [r6, #4]
 8f8:	e06a2005 	rsb	r2, r10, r5
 8fc:	e2433001 	sub	r3, r3, #1
 900:	e0862002 	add	r2, r6, r2
 904:	e1530004 	cmp	r3, r4
 908:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 90c:	13a01000 	movne	r1, #0
 910:	05864004 	streq	r4, [r6, #4]
 914:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 918:	e3530000 	cmp	r3, #0
 91c:	0affffee 	beq	8dc <__call_exitprocs+0x64>
 920:	e1a02418 	lsl	r2, r8, r4
 924:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 928:	e1120001 	tst	r2, r1
 92c:	e5969004 	ldr	r9, [r6, #4]
 930:	0a000016 	beq	990 <__call_exitprocs+0x118>
 934:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 938:	e1120001 	tst	r2, r1
 93c:	1a000016 	bne	99c <__call_exitprocs+0x124>
 940:	e59d0008 	ldr	r0, [sp, #8]
 944:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 948:	e1a0e00f 	mov	lr, pc
 94c:	e12fff13 	bx	r3
 950:	e5963004 	ldr	r3, [r6, #4]
 954:	e1530009 	cmp	r3, r9
 958:	1affffd0 	bne	8a0 <__call_exitprocs+0x28>
 95c:	e59b3000 	ldr	r3, [r11]
 960:	e1530006 	cmp	r3, r6
 964:	1affffcd 	bne	8a0 <__call_exitprocs+0x28>
 968:	e2444001 	sub	r4, r4, #1
 96c:	e3740001 	cmn	r4, #1
 970:	e2455004 	sub	r5, r5, #4
 974:	1affffdc 	bne	8ec <__call_exitprocs+0x74>
 978:	e59f1070 	ldr	r1, [pc, #112]	; 9f0 <__call_exitprocs+0x178>
 97c:	e3510000 	cmp	r1, #0
 980:	1a000009 	bne	9ac <__call_exitprocs+0x134>
 984:	e28dd014 	add	sp, sp, #20
 988:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 98c:	e12fff1e 	bx	lr
 990:	e1a0e00f 	mov	lr, pc
 994:	e12fff13 	bx	r3
 998:	eaffffec 	b	950 <__call_exitprocs+0xd8>
 99c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 9a0:	e1a0e00f 	mov	lr, pc
 9a4:	e12fff13 	bx	r3
 9a8:	eaffffe8 	b	950 <__call_exitprocs+0xd8>
 9ac:	e5963004 	ldr	r3, [r6, #4]
 9b0:	e3530000 	cmp	r3, #0
 9b4:	e5963000 	ldr	r3, [r6]
 9b8:	1a000008 	bne	9e0 <__call_exitprocs+0x168>
 9bc:	e3530000 	cmp	r3, #0
 9c0:	0a000006 	beq	9e0 <__call_exitprocs+0x168>
 9c4:	e1a00006 	mov	r0, r6
 9c8:	e58b3000 	str	r3, [r11]
 9cc:	e320f000 	nop	{0}
 9d0:	e59b6000 	ldr	r6, [r11]
 9d4:	e3560000 	cmp	r6, #0
 9d8:	1affffb5 	bne	8b4 <__call_exitprocs+0x3c>
 9dc:	eaffffe8 	b	984 <__call_exitprocs+0x10c>
 9e0:	e1a0b006 	mov	r11, r6
 9e4:	e1a06003 	mov	r6, r3
 9e8:	eafffff9 	b	9d4 <__call_exitprocs+0x15c>
 9ec:	00000b68 	.word	0x00000b68
 9f0:	00000000 	.word	0x00000000

000009f4 <register_fini>:
 9f4:	e92d4008 	push	{r3, lr}
 9f8:	e59f3010 	ldr	r3, [pc, #16]	; a10 <register_fini+0x1c>
 9fc:	e3530000 	cmp	r3, #0
 a00:	159f000c 	ldrne	r0, [pc, #12]	; a14 <register_fini+0x20>
 a04:	1bffff2b 	blne	6b8 <atexit>
 a08:	e8bd4008 	pop	{r3, lr}
 a0c:	e12fff1e 	bx	lr
 a10:	00000b90 	.word	0x00000b90
 a14:	00000a18 	.word	0x00000a18

00000a18 <__libc_fini_array>:
 a18:	e92d4038 	push	{r3, r4, r5, lr}
 a1c:	e59f5030 	ldr	r5, [pc, #48]	; a54 <__libc_fini_array+0x3c>
 a20:	e59f4030 	ldr	r4, [pc, #48]	; a58 <__libc_fini_array+0x40>
 a24:	e0654004 	rsb	r4, r5, r4
 a28:	e1b04144 	asrs	r4, r4, #2
 a2c:	10855104 	addne	r5, r5, r4, lsl #2
 a30:	0a000004 	beq	a48 <__libc_fini_array+0x30>
 a34:	e5353004 	ldr	r3, [r5, #-4]!
 a38:	e1a0e00f 	mov	lr, pc
 a3c:	e12fff13 	bx	r3
 a40:	e2544001 	subs	r4, r4, #1
 a44:	1afffffa 	bne	a34 <__libc_fini_array+0x1c>
 a48:	eb000050 	bl	b90 <__libc_fini>
 a4c:	e8bd4038 	pop	{r3, r4, r5, lr}
 a50:	e12fff1e 	bx	lr
 a54:	00000ba8 	.word	0x00000ba8
 a58:	00000bac 	.word	0x00000bac

00000a5c <__cs3_premain>:
 a5c:	e92d4008 	push	{r3, lr}
 a60:	eb00001d 	bl	adc <__libc_init_array>
 a64:	e59f3030 	ldr	r3, [pc, #48]	; a9c <__cs3_premain+0x40>
 a68:	e3530000 	cmp	r3, #0
 a6c:	15930000 	ldrne	r0, [r3]
 a70:	01a00003 	moveq	r0, r3
 a74:	e59f3024 	ldr	r3, [pc, #36]	; aa0 <__cs3_premain+0x44>
 a78:	e3530000 	cmp	r3, #0
 a7c:	15931000 	ldrne	r1, [r3]
 a80:	01a01003 	moveq	r1, r3
 a84:	e3a02000 	mov	r2, #0
 a88:	ebfffe7f 	bl	48c <main>
 a8c:	e59f3010 	ldr	r3, [pc, #16]	; aa4 <__cs3_premain+0x48>
 a90:	e3530000 	cmp	r3, #0
 a94:	1bffff0f 	blne	6d8 <exit>
 a98:	eafffffe 	b	a98 <__cs3_premain+0x3c>
	...
 aa4:	000006d8 	.word	0x000006d8

00000aa8 <_exit>:
 aa8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 aac:	e3a00018 	mov	r0, #24
 ab0:	e59f1004 	ldr	r1, [pc, #4]	; abc <_exit+0x14>
 ab4:	ef123456 	svc	0x00123456
 ab8:	eafffffe 	b	ab8 <_exit+0x10>
 abc:	00020026 	.word	0x00020026

00000ac0 <__cs3_isr_interrupt>:
 ac0:	eafffffe 	b	ac0 <__cs3_isr_interrupt>

00000ac4 <__cs3_isr_undef>:
 ac4:	eafffffe 	b	ac4 <__cs3_isr_undef>

00000ac8 <__cs3_isr_swi>:
 ac8:	eafffffe 	b	ac8 <__cs3_isr_swi>

00000acc <__cs3_isr_pabort>:
 acc:	eafffffe 	b	acc <__cs3_isr_pabort>

00000ad0 <__cs3_isr_dabort>:
 ad0:	eafffffe 	b	ad0 <__cs3_isr_dabort>

00000ad4 <__cs3_isr_irq>:
 ad4:	eafffffe 	b	ad4 <__cs3_isr_irq>

00000ad8 <__cs3_isr_fiq>:
 ad8:	eafffffe 	b	ad8 <__cs3_isr_fiq>

00000adc <__libc_init_array>:
 adc:	e92d4070 	push	{r4, r5, r6, lr}
 ae0:	e59f506c 	ldr	r5, [pc, #108]	; b54 <__libc_init_array+0x78>
 ae4:	e59f606c 	ldr	r6, [pc, #108]	; b58 <__libc_init_array+0x7c>
 ae8:	e0656006 	rsb	r6, r5, r6
 aec:	e1b06146 	asrs	r6, r6, #2
 af0:	12455004 	subne	r5, r5, #4
 af4:	13a04000 	movne	r4, #0
 af8:	0a000005 	beq	b14 <__libc_init_array+0x38>
 afc:	e5b53004 	ldr	r3, [r5, #4]!
 b00:	e2844001 	add	r4, r4, #1
 b04:	e1a0e00f 	mov	lr, pc
 b08:	e12fff13 	bx	r3
 b0c:	e1560004 	cmp	r6, r4
 b10:	1afffff9 	bne	afc <__libc_init_array+0x20>
 b14:	e59f5040 	ldr	r5, [pc, #64]	; b5c <__libc_init_array+0x80>
 b18:	e59f6040 	ldr	r6, [pc, #64]	; b60 <__libc_init_array+0x84>
 b1c:	e0656006 	rsb	r6, r5, r6
 b20:	eb000012 	bl	b70 <_init>
 b24:	e1b06146 	asrs	r6, r6, #2
 b28:	12455004 	subne	r5, r5, #4
 b2c:	13a04000 	movne	r4, #0
 b30:	0a000005 	beq	b4c <__libc_init_array+0x70>
 b34:	e5b53004 	ldr	r3, [r5, #4]!
 b38:	e2844001 	add	r4, r4, #1
 b3c:	e1a0e00f 	mov	lr, pc
 b40:	e12fff13 	bx	r3
 b44:	e1560004 	cmp	r6, r4
 b48:	1afffff9 	bne	b34 <__libc_init_array+0x58>
 b4c:	e8bd4070 	pop	{r4, r5, r6, lr}
 b50:	e12fff1e 	bx	lr
 b54:	00000b88 	.word	0x00000b88
 b58:	00000b88 	.word	0x00000b88
 b5c:	00000b88 	.word	0x00000b88
 b60:	00000b90 	.word	0x00000b90

Disassembly of section .rodata:

00000b68 <_global_impure_ptr>:
 b68:	00000bd0 00000043                       ....C...

00000b70 <_init>:
 b70:	e1a0c00d 	mov	r12, sp
 b74:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b78:	e24cb004 	sub	r11, r12, #4
 b7c:	e24bd028 	sub	sp, r11, #40	; 0x28
 b80:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b84:	e12fff1e 	bx	lr

00000b88 <__init_array_start>:
 b88:	000009f4 	.word	0x000009f4

00000b8c <__frame_dummy_init_array_entry>:
 b8c:	00000208                                ....

00000b90 <__libc_fini>:
 b90:	e1a0c00d 	mov	r12, sp
 b94:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b98:	e24cb004 	sub	r11, r12, #4
 b9c:	e24bd028 	sub	sp, r11, #40	; 0x28
 ba0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ba4:	e12fff1e 	bx	lr

00000ba8 <__fini_array_start>:
 ba8:	000001c4 	.word	0x000001c4

00000bac <__cs3_regions>:
 bac:	00000000 	.word	0x00000000
 bb0:	00000040 	.word	0x00000040
 bb4:	00000040 	.word	0x00000040
 bb8:	00000fc0 	.word	0x00000fc0
 bbc:	00000020 	.word	0x00000020
